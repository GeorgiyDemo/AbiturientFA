"""
    –ö–ª–∏–µ–Ω—Ç Telegram –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–±–∏—Ç—É—Ä—ã
"""
import telegram, yaml, requests, time, threading
from telegram.error import NetworkError, Unauthorized

update_id = None

def threading_check_client_results(bot):
    while True:
        try:
            update_request = requests.post("http://127.0.0.1:5000/updates").json()
            if update_request != []:
                for update in update_request:
                    if int(update["changed_from"])>int(update["changed_to"]):
                        viewflag = "‚¨ÜÔ∏è"
                    else:
                        viewflag = "‚¨áÔ∏è"
                    bot.send_message(chat_id=update["tid"], text=viewflag+" –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Å "+update["changed_from"]+" –Ω–∞ "+update["changed_to"]+" –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ "+update["wayname"])
        except:
            continue
        time.sleep(60)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global update_id
    with open("./tokens.yaml", 'r') as stream:
        token = yaml.load(stream)
    bot = telegram.Bot(token)
    threading.Thread(target=threading_check_client_results, args=(bot,)).start()
    try:
        update_id = bot.get_updates()[0].update_id
    except IndexError:
        update_id = None

    while True:
        try:
            handler(bot)
        except NetworkError:
            time.sleep(1)
        except Unauthorized:
            update_id += 1


def handler(bot):
    global update_id
    p_mode = telegram.ParseMode.HTML
    for update in bot.get_updates(offset=update_id, timeout=10):
        update_id = update.update_id + 1
        if update.message.text == "/start":
            update.message.reply_text("–ü—Ä–∏–≤–µ—Ç üêæ\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–º –Ω–∞ —Å–∞–π—Ç–µ fa.ru\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞\n<b>/set —Ñ–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ</b>", parse_mode=p_mode)

        elif update.message.text.split(" ")[0]=="/set":
            name = update.message.text.split(" ")
            #–ß—Ç–æ–± –§–ò–û –±—ã–ª–æ –ø–æ–ª–Ω–æ–µ
            if len(name) != 4:
                update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–û–±—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:\n<b>/set —Ñ–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ</b>", parse_mode=p_mode)

                return 0
            name = name[1]+" "+name[2]+" "+name[3]
            update.message.reply_text("–ò—â–µ–º –≤ —Å–ø–∏—Å–∫–∞—Ö \""+name+"\" (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)")
            r = requests.post("http://127.0.0.1:5000/adduser",json={"tid":update.message.from_user.id, "username":name}).json()
            if r["status"] == "ok":
                update.message.reply_text("–î–∞, —Ç—ã –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö, —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º—É üòå\n–ï—Å–ª–∏ –∑–∞–º–µ–Ω–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –§–ò–û, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π <b>/set</b>", parse_mode=p_mode)
            else:
                update.message.reply_text("–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–∞—Ö üòî")

if __name__ == '__main__':
    main()