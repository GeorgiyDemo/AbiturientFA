import database_module
import json
import requests
import time
import vk
import xlrd
import yaml

with open("./yaml/token.yaml", 'r') as stream:
    API_TOKEN = yaml.safe_load(stream)

API_VERSION = 5.89
USERS_YEARS = ["2002", "2003"]
GROUPS_ID_LIST = [134724725, 27590309, 196939200, 37015953]
OUT_TXT_FILE = "./OUTPUT/OUTPUT_VK.txt"


def vk_writer(vk_json, groupflag, long_name):
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—à–ª–∏"""
    for item in vk_json:

        vk_link = "https://vk.com/id" + str(item["id"])
        if groupflag:
            print("‚úÖ –ù–∞—à–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å {} –ø–æ –≥—Ä—É–ø–ø–µ VK ".format(vk_link))
        obj = database_module.MySQLClass(
            "INSERT INTO vk_users (first_name, last_name, link, full_name) VALUES ('{}','{}','{}','{}')".format(item["first_name"], item["last_name"], vk_link, long_name),1)
        
        #–ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –°–£–ë–î
        if obj.result:
            groupflag = (groupflag == True and " [–ø–æ –≥—Ä—É–ø–ø–µ –≤ –≤–∫]" or "")
            out_str = item["first_name"] + " " + item["last_name"] + " " + vk_link + groupflag + "\n"
            with open(OUT_TXT_FILE, 'a') as file:
                file.write(out_str)

class VkClass():
    def __init__(self, result_array):
        print("*–ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –ø–æ VK*")
        self.result_array = result_array
        session = vk.Session(access_token=API_TOKEN)
        self.api = vk.API(session)
        self.APIVersion = API_VERSION
        self.API_checker()
        
        user_input = input("–û–±–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø? (y/n) -> ")
        if user_input == "y":
            print("–ü–æ–Ω—è–ª, –æ–±–Ω–æ–≤–ª—è–µ–º..")
            self.groups_dumper()
        else:
            print("–ü–æ–Ω—è–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..")

        # –ß–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
        open(OUT_TXT_FILE, 'w').close()
        self.processing()

    def API_checker(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API —Ç.–∫. VK –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–¥–∞–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ API –æ—Ç–¥–∞–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        group_results = self.api.users.search(q="Alisa Kot", group_id=161406423, v=self.APIVersion)["items"]
        if group_results == []:
            raise Exception("üåöüåöüåö –ú–µ–Ω—è–π —Ç–æ–∫–µ–Ω VK üåöüåöüåö","–ö–æ–Ω—Ç–∞–∫—Ç —É–±–∏–ª —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã –≤ —É—Å–ª–æ–≤–∏–∏")
        else:
            print("üåù VK API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã

    def groups_dumper(self):
        """–î–∞–º–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""



        database_module.MySQLClass("DELETE FROM FA.buf_table;",1)
        USERS_PER_REQUEST = 1000
        print("–û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø..")
        for group in GROUPS_ID_LIST:
            
            print("–†–∞–±–æ—Ç–∞–µ–º —Å –≥—Ä—É–ø–ø–æ–π https//vk.com/club"+str(group))
            users_count = 1
            group_results = self.api.groups.getMembers(count=USERS_PER_REQUEST, group_id=group, v=self.APIVersion)
            group_users = group_results["count"]
            print("–û–±—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: "+str(group_users))
            
            #–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            user_results = self.api.users.get(user_ids=group_results["items"], v=self.APIVersion)

            for item in user_results:
                print("{} {}, https://vk.com/{}".format(item["first_name"], item["last_name"], item["id"]))
                database_module.MySQLClass("INSERT INTO buf_table (profile_link, first_name, last_name, club_link) VALUES (\"https://vk.com/id{}\",\"{}\",\"{}\",\"https://vk.com/club{}\")".format(item["id"], item["first_name"], item["last_name"], group),1)
                print("[{}/{}] –ó–∞–ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.com/id{} —Å –≥—Ä—É–ø–ø—ã https://vk.com/club{}".format(users_count, group_users, item["id"], group))
                users_count += 1

            
            #–ï—Å–ª–∏ –º–µ–Ω—å—à–µ , —á–µ–º —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ - –≤—ã–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ
            if len(group_results["items"]) < group_users:
                #–ö–æ–ª-–≤–æ —Å–º–µ—â–µ–Ω–∏–π
                offset_count = int(group_users/USERS_PER_REQUEST)
                print(offset_count)
                
                
                for i_offset in range(offset_count):
                    print("count={}, group_id={}, offset={}".format(USERS_PER_REQUEST, group, users_count))
                    thisgroup_results = self.api.groups.getMembers(count=USERS_PER_REQUEST, group_id=group, offset=users_count, v=self.APIVersion)
                    #–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                    user_results = self.api.users.get(user_ids=thisgroup_results["items"], v=self.APIVersion)
                    
                    for item in user_results:
                        print("{} {}, https://vk.com/{}".format(item["first_name"], item["last_name"], item["id"]))
                        database_module.MySQLClass("INSERT INTO buf_table (profile_link, first_name, last_name, club_link) VALUES (\"https://vk.com/id{}\",\"{}\",\"{}\",\"https://vk.com/club{}\")".format(item["id"], item["first_name"], item["last_name"], group),1)
                        print("[{}/{}] –ó–∞–ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.com/id{} —Å –≥—Ä—É–ø–ø—ã https://vk.com/club{}".format(users_count, group_users, item["id"], group))
                        users_count += 1
                    time.sleep(1)
                    
            
            else:
                print("–í—Å–µ –¥–∞–º–ø–Ω—É–ª–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑")
            if users_count == group_users:
                print("–î–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã")
            else:
                print("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –±—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã")


    def processing(self):

        #–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for item in self.result_array:
        
            long_name = item[3]

            #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–µ–º—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            obj = database_module.MySQLClass("SELECT * FROM vk_users WHERE full_name='{}'".format(long_name),2)
            
            if obj.result is None:

                print("\nüç∫ –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} üç∫\n–ú–µ—Å—Ç–æ {}, {} –±–∞–ª–ª [{}]\n{}".format(long_name, item[1], item[7], item[5], item[4]))
                first_name, last_name, *_ = long_name.split(" ")
                
                check = database_module.MySQLClass("SELECT * FROM buf_table WHERE first_name='{}' AND last_name='{}'".format(first_name,last_name),3)
                print(check.result)

            
            else:
                print("{} - —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..".format(long_name))