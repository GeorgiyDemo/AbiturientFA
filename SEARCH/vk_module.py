import database_module
import json
import requests
import time
import vk
import xlrd
import yaml

with open("./yaml/token.yaml", 'r') as stream:
    API_TOKEN = yaml.safe_load(stream)

API_VERSION = 5.89
USERS_YEARS = ["2002", "2003"]
GROUPS_ID_LIST = [134724725, 27590309, 196939200, 37015953]
OUT_TXT_FILE = "./OUTPUT/OUTPUT_VK.txt"


def vk_writer(vk_json, groupflag, long_name):
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—à–ª–∏"""
    for item in vk_json:

        vk_link = "https://vk.com/id" + str(item["id"])
        if groupflag:
            print("‚úÖ –ù–∞—à–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å {} –ø–æ –≥—Ä—É–ø–ø–µ VK ".format(vk_link))
        obj = database_module.MySQLWriter(
            "INSERT INTO vk_users (first_name, last_name, link, full_name) VALUES ('{}','{}','{}','{}')".format(item["first_name"], item["last_name"], vk_link, long_name))
        
        #–ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –°–£–ë–î
        if obj.result:
            groupflag = (groupflag == True and " [–ø–æ –≥—Ä—É–ø–ø–µ –≤ –≤–∫]" or "")
            out_str = item["first_name"] + " " + item["last_name"] + " " + vk_link + groupflag + "\n"
            with open(OUT_TXT_FILE, 'a') as file:
                file.write(out_str)

class VkClass():
    def __init__(self, result_array):
        print("*–ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –ø–æ VK*")
        self.result_array = result_array
        session = vk.Session(access_token=API_TOKEN)
        self.api = vk.API(session)
        self.APIVersion = API_VERSION
        self.API_checker()
        
        user_input = input("–û–±–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø? (y/n) -> ")
        if user_input == "y":
            print("–ü–æ–Ω—è–ª, –æ–±–Ω–æ–≤–ª—è–µ–º..")
            self.groups_dumper()
        else:
            print("–ü–æ–Ω—è–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..")

        # –ß–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
        open(OUT_TXT_FILE, 'w').close()
        self.processing()

    def API_checker(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API —Ç.–∫. VK –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–¥–∞–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""

        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ API –æ—Ç–¥–∞–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        group_results = self.api.users.search(q="Alisa Kot", group_id=161406423, v=self.APIVersion)["items"]
        if group_results == []:
            raise Exception("üåöüåöüåö –ú–µ–Ω—è–π —Ç–æ–∫–µ–Ω VK üåöüåöüåö","–ö–æ–Ω—Ç–∞–∫—Ç —É–±–∏–ª —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã –≤ —É—Å–ª–æ–≤–∏–∏")
        else:
            print("üåù VK API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã

    def groups_dumper(self):
        """–î–∞–º–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""

        
        database_module.MySQLWriter("DELETE FROM FA.buf_table;")
        USERS_PER_REQUEST = 1000
        print("–û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø..")
        for group in GROUPS_ID_LIST:
            
            print("–†–∞–±–æ—Ç–∞–µ–º —Å –≥—Ä—É–ø–ø–æ–π https//vk.com/club"+str(group))
            users_count = 0
            group_results = self.api.users.search(count=USERS_PER_REQUEST, group_id=group, v=self.APIVersion)
            group_users = group_results["count"]
            print("–û–±—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: "+str(group_users))
            for item in group_results["items"]:
                obj = database_module.MySQLWriter("INSERT INTO buf_table (profile_link, first_name, last_name, club_link) VALUES ('https://vk.com/id{}','{}','{}','https://vk.com/club{}')".format(item["id"], item["first_name"], item["last_name"], group))
                print("[{}] –ó–∞–ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.com/id{} —Å –≥—Ä—É–ø–ø—ã https://vk.com/club{}".format(users_count, item["id"], group))
                users_count += 1

            
            #–ï—Å–ª–∏ –º–µ–Ω—å—à–µ , —á–µ–º —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ - –≤—ã–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ
            if len(group_results["items"]) < group_users:
                #–°–º–µ—â–µ–Ω–∏–µ
                offset = int(group_users/USERS_PER_REQUEST)
                print(offset)

                for i in range(offset):
                    print("–°–º–µ—â–µ–Ω–∏–µ ",i)
                    thisgroup_results = self.api.users.search(count=USERS_PER_REQUEST, group_id=group, offset=users_count, v=self.APIVersion)
                    for item in thisgroup_results["items"]:
                        obj = database_module.MySQLWriter("INSERT INTO buf_table (profile_link, first_name, last_name, club_link) VALUES ('https://vk.com/id{}','{}','{}','https://vk.com/club{}')".format(item["id"], item["first_name"], item["last_name"], group))
                        print("[{}] –ó–∞–ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.com/id{} —Å –≥—Ä—É–ø–ø—ã https://vk.com/club{}".format(users_count, item["id"], group))
                        users_count += 1
                    time.sleep(2)
                    
            
            else:
                print("–í—Å–µ –¥–∞–º–ø–Ω—É–ª–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑")
            if users_count == group_users:
                print("–î–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã")
            else:
                print("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –±—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã")


    def processing(self):

        #–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for item in self.result_array:
        
            long_name = item[3]

            #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–µ–º—É –≤ —Ç–∞–±–ª–∏—Ü–µ
            obj = database_module.MySQLReaderOne("SELECT * FROM vk_users WHERE full_name='{}'".format(long_name))
            
            if obj.result is None:

                print("\nüç∫ –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {} üç∫\n–ú–µ—Å—Ç–æ {}, {} –±–∞–ª–ª [{}]\n{}".format(long_name, item[1], item[7], item[5], item[4]))
                first_name, last_name, *_ = long_name.split(" ")
                
                check = database_module.MySQLReaderAll("SELECT * FROM buf_table WHERE first_name='{}' AND last_name='{}'".format(first_name,last_name))
                print(check)

                #–ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º, —Å–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                #self.search_groups(short_name, long_name)
                #time.sleep(3)
                
                #TODO
                #–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
                #self.search_profile_method(short_name, long_name)
                #time.sleep(3)
            
            else:
                print("{} - —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..".format(long_name))


    def search_profile_method(self, inputname, full_name):
        year_processing_flag = True

        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç
        print(" ‚ûú –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ VK")
        simple_profiles = self.api.users.search(q=inputname, v=self.APIVersion)["items"]
        if len(simple_profiles) > 3 or simple_profiles == []:
            print("–ú–Ω–æ–≥–æ –ª—é–¥–µ–π –ø–µ—Ä–µ–µ–∑–∂–∞–µ–º –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ –≥–æ–¥–∞–º..")
        else:
            print("–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–æ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–∞—è")
            vk_writer(simple_profiles, False, full_name)
            year_processing_flag = False

        if year_processing_flag:
            good_flag = False
            for born_year in USERS_YEARS:
                time.sleep(1)
                profiles = self.api.users.search(q=inputname, birth_year=born_year, v=self.APIVersion)["items"]
                if (len(profiles) == 1) and profiles != []:
                    print("–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–æ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–∞—è –ø–æ " + born_year + " –≥–æ–¥—É")
                    vk_writer(profiles, False, full_name)
                    good_flag = True
                else:
                    print(born_year + " –≥–æ–¥, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–ª–∏ –∏—Ö –Ω–µ—Ç —Å–æ–≤—Å–µ–º((")

            if good_flag:
                print("‚ö†Ô∏è–í–æ–∑–º–æ–∂–Ω–æ –º—ã –Ω–∞—à–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ–¥—É‚ö†")

    def search_groups(self, short_name, long_name):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º –§–∏–Ω–∞—à–∫–∏
        """
        print(" ‚ûú –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –≤ VK..")
        for group in GROUPS_ID_LIST:
            
            group_results = self.api.users.search(q=short_name, group_id=group, v=self.APIVersion)["items"]
            if group_results != []:
                print("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å")
                vk_writer(group_results, True, long_name)